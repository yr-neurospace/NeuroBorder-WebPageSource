{
  "hash": "43ba6c61e43d58d2a137c15dc016c0b7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Deploy and run RepeatModeler/RepeatMasker\"\nauthor: \"Rui Yang\"\ndate: \"2025-06-17\"\ndate-modified: last-modified\ncategories: [genome masking, repeatmodeler, repeatmasker]\nformat:\n  html:\n    toc: true\n    toc-depth: 6\n    toc-location: left\n    fig-align: center\n    number-depth: 6\n    number-sections: true\n    fig-cap-location: bottom\n    fig-format: png\n    lightbox: true\n    tbl-cap-location: top\n    page-layout: full\njupyter: julia-1.10\nexecute:\n  warning: false\n  eval: false\n---\n\n\n\n\n## Deploy and run RepeatModeler/RepeatMasker using Singularity\n\n\n\n\n```{bash}\n# pull the Dfam TETools docker image\n# and save it as an SIF image file\nsingularity pull dfam-tetools-latest.sif docker://dfam/tetools:latest\n\n# clone the Dfam TETools\ngit clone https://github.com/Dfam-consortium/TETools.git\n\n# run the Dfam TETools singularity image\n/data/softwares/TETools/TETools/dfam-tetools.sh  --singularity --container /data/softwares/TETools/dfam-tetools-latest.sif\n\n# convert soft-masked genome sequences into unmasked genome sequences\n# for testing the pipeline only\ncat soft-masked.fa | awk '{if ($0 !~ /^>/) {print toupper($0)} else {print $0}}' > unmasked.fa\n\n## run RepeatModeler & RepeatMasker\n# for more info, see\n# https://github.com/Dfam-consortium/RepeatModeler\n# https://github.com/Dfam-consortium/TETools\n# https://www.repeatmasker.org\ndb_name=sugarglider\nfa_file=sugarglider.fasta\n\n# format FASTA files for use with RepeatModeler\nBuildDatabase -name ${db_name} ${fa_file}\n\n# model repetitive DNA using RepeatModeler\nnohup RepeatModeler -database ${db_name} -threads 80 -LTRStruct &> ${db_name}.run_repeatmodeler.log &\n\n# save the last background process PID to a file\necho $! > ${db_name}.run_repeatmodeler.pid\n# test whether the process is finished\n# if the process exists, then the return code is 0, or 1\nif kill -0 $(cat ${db_name}.run_repeatmodeler.pid) 2> /dev/null; then echo \"The process is still running\"; else echo \"The process has finished\"; fi\nif ps -p $(cat ${db_name}.run_repeatmodeler.pid) > /dev/null; then echo \"The process is still running\"; else echo \"The process has finished\"; fi\n\n# mask repetitive DNA using RepeatMasker\nrepeatmasker_output_dir=${db_name}.repeatmasker_output\n\nnohup RepeatMasker -xsmall -a -e ncbi -gff -pa 30 -lib ${db_name}-families.fa -dir ${repeatmasker_output_dir} ${fa_file} &> ${db_name}.run_repeatmasker.log &\n\n# save the last background process PID to a file\necho $! > ${db_name}.run_repeatmasker.pid\n# test whether the process is finished\n# if the process exists, then the return code is 0, or 1\nif kill -0 $(cat ${db_name}.run_repeatmasker.pid) 2> /dev/null; then echo \"The process is still running\"; else echo \"The process has finished\"; fi\nif ps -p $(cat ${db_name}.run_repeatmasker.pid) > /dev/null; then echo \"The process is still running\"; else echo \"The process has finished\"; fi\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}