{
  "hash": "76246b0b235186826e3e6c97861b3d39",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Build ENCODE RNA-Seq pipeline indices\"\nauthor: \"Rui Yang\"\ndate: \"2025-02-26\"\ndate-modified: last-modified\ncategories: [encode, rna-seq, index]\nformat:\n  html:\n    toc: true\n    toc-depth: 6\n    toc-location: left\n    fig-align: center\n    number-depth: 6\n    number-sections: true\n    fig-cap-location: bottom\n    fig-format: png\n    lightbox: true\n    tbl-cap-location: top\n    page-layout: full\n\nexecute:\n  warning: false\n  eval: false\n---\n\n\n\n\n## Introduction\n\nFor more details, refer to [ENCODE RNA-Seq pipeline](https://github.com/ENCODE-DCC/rna-seq-pipeline).\n\n## Prepare necessary files\n\n### Convert GFF to GTF\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngffread /data/biodatabase/species/sugar_glider_slb_v1/genome/anno/sugarglider.gff3 -T -o /data/biodatabase/species/sugar_glider_slb_v1/genome/anno/sugarglider.gtf\n```\n:::\n\n\n\n\n### Merge annotations if needed\n\n#### Prepare input JSON file\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n{\n    \"merge_anno.annotation\": \"gencode.v29.primary_assembly.annotation_UCSC_names.gtf.gz\",\n    \"merge_anno.tRNA\": \"gencode.v29.tRNAs.gtf.gz\",\n    \"merge_anno.spikeins\": \"ERCC_phiX.fa.gz\",\n    \"merge_anno.output_filename\": \"merged_annotation_V29.gtf.gz\"\n}\n```\n:::\n\n\n\n\n#### Merge annotations\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncaper run /data/softwares/encode_pipeline/rna-seq-pipeline_v1.2.4/make_index_wdl/merge_anno.wdl -c /data/softwares/encode_pipeline/caper/local.conf -i merge_anno_input.json --max-concurrent-tasks 2 --singularity\n```\n:::\n\n\n\n\n## Build STAR index\n\n### Prepare input JSON file\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n{\n    \"build_index.reference_sequence\": \"/data/biodatabase/species/sugar_glider_slb_v1/genome/genome/sugarglider.fasta.gz\",\n    \"build_index.spikeins\": \"/data/biodatabase/species/sugar_glider_slb_v1/genome/genome/ERCC_phix.spikeins.fasta.gz\",\n    \"build_index.annotation\": \"/data/biodatabase/species/sugar_glider_slb_v1/genome/anno/sugarglider.gtf.gz\",\n    \"build_index.anno_version\": \"v1\",\n    \"build_index.genome\": \"sugarglider\",\n    \"build_index.index_type\": \"prep_star\",\n    \"build_index.ncpu\": 60,\n    \"build_index.memGB\": 512\n}\n```\n:::\n\n\n\n\n### Build STAR index\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncaper run /data/softwares/encode_pipeline/rna-seq-pipeline_v1.2.4/make_index_wdl/build_genome_index.wdl -c /data/softwares/encode_pipeline/caper/local.conf -i /data/biodatabase/species/sugar_glider_slb_v1/encode_references/bulk_rna_seq/star_index_input.json --max-concurrent-tasks 1 --singularity\n```\n:::\n\n\n\n\n## Build RSEM index\n\n### Prepare input JSON file\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n{\n    \"build_index.reference_sequence\": \"/data/biodatabase/species/sugar_glider_slb_v1/genome/genome/sugarglider.fasta.gz\",\n    \"build_index.spikeins\": \"/data/biodatabase/species/sugar_glider_slb_v1/genome/genome/ERCC_phix.spikeins.fasta.gz\",\n    \"build_index.annotation\": \"/data/biodatabase/species/sugar_glider_slb_v1/genome/anno/sugarglider.gtf.gz\",\n    \"build_index.anno_version\": \"v1\",\n    \"build_index.genome\": \"sugarglider\",\n    \"build_index.index_type\": \"prep_rsem\",\n    \"build_index.ncpu\": 60,\n    \"build_index.memGB\": 512\n}\n```\n:::\n\n\n\n\n### Build RSEM index\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncaper run /data/softwares/encode_pipeline/rna-seq-pipeline_v1.2.4/make_index_wdl/build_genome_index.wdl -c /data/softwares/encode_pipeline/caper/local.conf -i /data/biodatabase/species/sugar_glider_slb_v1/encode_references/bulk_rna_seq/rsem_index_input.json --max-concurrent-tasks 1 --singularity\n```\n:::\n\n\n\n\n## Prepare other files\n\nIn most cases, you need to modify the following code to suit yourself.\n\n### Prepare transcript IDs to gene biotypes mapping table\n\nIn this example, due to the lack of gene biotype field, we assign all transcripts with the gene biotype \"protein_coding\".\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rtracklayer)\nlibrary(tidyverse)\nlibrary(vroom)\n\ngtf_file <- \"/data/biodatabase/species/sugar_glider_slb_v1/genome/anno/sugarglider.gtf.gz\"\noutput_file <- \"/data/biodatabase/species/sugar_glider_slb_v1/encode_references/bulk_rna_seq/sugarglider.v1.transcript_id_to_gene_type.tsv\"\ntranscript_field <- \"transcript\"\ntranscript_type <- \"protein_coding\"\n\ndf <- as.data.frame(rtracklayer::import(gtf_file, format = \"gtf\"))\ndf <- df %>%\n    filter(type == transcript_field) %>%\n    mutate(transcript_type = transcript_type) %>%\n    select(transcript_id, transcript_type) %>%\n    arrange(transcript_id) %>%\n    distinct()\nvroom_write(df, file = output_file, col_names = FALSE, append = FALSE)\n```\n:::\n\n\n\n\n### Prepare gene/transcript IDs to names mapping table\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(YRUtils)\nlibrary(vroom)\n\ngff_file <- \"/data/biodatabase/species/sugar_glider_slb_v1/genome/anno/sugarglider.gff3.gz\"\ntarget_type <- \"transcript\"\n\ndf <- extract_gene_id_from_gff(gff_file, target_type = target_type)\nvroom_write(df, file = paste0(gff_file, \".\", target_type, \"_id_name_mapping_table.tsv\"), col_names = TRUE, append = FALSE)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}