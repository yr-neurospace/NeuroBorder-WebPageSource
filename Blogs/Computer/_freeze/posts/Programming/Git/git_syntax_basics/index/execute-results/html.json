{
  "hash": "58f9248518c31f26c018a8b575a67792",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Git syntax basics\"\nauthor: \"Rui Yang\"\ndate: \"2024-09-22\"\ndate-modified: last-modified\ncategories: [git, syntax]\nformat:\n  html:\n    toc: true\n    toc-depth: 6\n    toc-location: left\n    fig-align: center\n    number-depth: 6\n    number-sections: true\n    fig-cap-location: bottom\n    fig-format: png\n    lightbox: true\n    tbl-cap-location: top\n    page-layout: full\n\nexecute:\n  warning: false\n---\n\n\n## Git initial settings\n\n1.  Set the user name and email address\n\n\n```{bash}\ngit config --global user.name \"Rui Yang\"\ngit config --global user.email \"neurospace@petalmail.com\"\n```\n\n\n2.  Improve the output readability\n\n\n```{bash}\ngit config --global color.ui auto\n```\n\n\nThese settings will be stored in the file `~/.gitconfig` in the following form:\n\n\n```{bash}\n[user]\n        name = Rui Yang\n        email = neurospace@petalmail.com\n[color]\n        ui = auto\n```\n\n\n## GitHub initial settings\n\n1.  Set SSH key\n\n\n```{bash}\n# don't forget to enter passphrase\nssh-keygen -t rsa -C \"neurospace@petalmail.com\"\n```\n\n\nThis command will create two files `id_rsa` (private key), and `id_rsa.pub` (public key) under `~/.ssh`.\n\n2.  Add `id_rsa.pub` to GitHub\n\n3.  Validate your settings\n\n\n```{bash}\nssh -T git@github.com\n```\n\n\n4.  Then you can use SSH key to clone and push a repository from and to GitHub\n\n\n```{bash}\ngit clone git@github.com:yr-neurospace/YRUtils.jl.git\n```\n\n\n## Git operations\n\n### Basic operations\n\n1.  `git init` —— initialize a repository\n\n\n```{bash}\n# create a directory first\nmkdir git-tutorial\ncd git-tutorial\n# initialize a repository\n# this will create a .git directory in the curent working directory\n# it records all needed for managing this repository\ngit init\n\n# 提示：使用 'master' 作为初始分支的名称。这个默认分支名称可能会更改。要在新仓库中\n# 提示：配置使用初始分支名，并消除这条警告，请执行：\n# 提示：\n# 提示：  git config --global init.defaultBranch <名称>\n# 提示：\n# 提示：除了 'master' 之外，通常选定的名字有 'main'、'trunk' 和 'development'。\n# 提示：可以通过以下命令重命名刚创建的分支：\n# 提示：\n# 提示：  git branch -m <name>\n# 已初始化空的 Git 仓库于 /home/yangrui/temp/git-tutorial/.git/\n```\n\n\n2.  `git status` —— check the status of a repository\n\n\n```{bash}\ngit status\n\n# 位于分支 master\n\n# 尚无提交\n\n# 无文件要提交（创建/拷贝文件并使用 \"git add\" 建立跟踪）\n\n# we have not any files to be committed yet\n# let's create a README.md file for the first commit\ntouch README.md\ngit status\n\n# 位于分支 master\n\n# 尚无提交\n\n# 未跟踪的文件:\n#   （使用 \"git add <文件>...\" 以包含要提交的内容）\n#         README.md\n\n# 提交为空，但是存在尚未跟踪的文件（使用 \"git add\" 建立跟踪）\n```\n\n\n3.  `git add` —— add files to staging area\n\n\n```{bash}\n# when we create a file, it won't be managed automatically by git\n# we can see that README.md created above is listed as \"Untracted files\"\n# before adding README.md to our repository formally, we first need to add it to the staging area\n# which can be considered as a buffer area\ngit add README.md\ngit status\n\n# 位于分支 master\n\n# 尚无提交\n\n# 要提交的变更：\n#   （使用 \"git rm --cached <文件>...\" 以取消暂存）\n#         新文件：   README.md\n```\n\n\n4.  `git commit` —— add files in the staging area to our repository formally\n\n\n```{bash}\n# content after -m is a summary of the current commit\n# if you want to write more about the commit\n# you can run \"git commit\" without -m directly\n# this will open a text editor\n# and then you can enter more about the commit\n# by convention, the content you enter should be in the format:\n# line 1: a brief summary about the commit\n# line 2: blank line\n# line 3 and after: detailed info about the commit\n# note: if you want to abort the commit, don't enter any, and then close the editor directly\ngit commit -m \"First commit\"\n\n# [master（根提交） 7f9f90e] First commit\n#  1 file changed, 0 insertions(+), 0 deletions(-)\n#  create mode 100644 README.md\n```\n\n\n4.  `git log` —— check commit log\n\n\n```{bash}\n# the string \"7f9f90ef2c6d56862f096f3e0e288af5c3024097\" by \"commit\" in the console output is a hash value\n# which can be used to locate this commit uniquely\ngit log\n\n# commit 7f9f90ef2c6d56862f096f3e0e288af5c3024097 (HEAD -> master)\n# Author: Rui Yang <neurospace@petalmail.com>\n# Date:   Tue May 14 13:26:07 2024 +0800\n\n#     First commit\n\n# to show log in graph\ngit log --graph\n\n# to show more concise info each commit\ngit log --pretty=short\n\n# to show log associated with a specific dir or file\ngit log README.md\n\n# to show modifications added by the last commit\ngit log -p\n\n# to show modifications associated with a specific dir or file added by the last commit\ngit log -p README.md\n```\n\n\n5.  `git diff` —— check modifications\n\n\n```{bash}\n# now let's add \"# Git Guide\" to the README.md\n# this modifies README.md in the working tree\n# the following command displays the difference between the working tree and the staging area\n# due to nothing existed in the staging area\n# it turns to display the difference between the working tree and the last commit\ngit diff\n\n# diff --git a/README.md b/README.md\n# index e69de29..0a49ef6 100644\n# --- a/README.md\n# +++ b/README.md\n# @@ -0,0 +1 @@\n# +# Git Guide\n\ngit add README.md\n\n# if you run \"git diff\" now, it will print nothing\n# because the status between the working tree and the staging area is of no diffrence\n# to check the difference between the working tree and the last commit\n# using\ngit diff HEAD\n\n# diff --git a/README.md b/README.md\n# index e69de29..0a49ef6 100644\n# --- a/README.md\n# +++ b/README.md\n# @@ -0,0 +1 @@\n# +# Git Guide\n\ngit commit -m \"Add index\"\n```\n\n\n### Operations on branches\n\nThe master branch is created by Git by default.\n\nWe can create multiple branches from the master branch or other branches.\n\nEach branch can be developed at the same time and is usually dedicated to a specific feature development (including fixing some bugs). Once the development of some branch is done, we can merge it with the master branch (in most cases).\n\n1.  `git branch` —— list all branches\n\n\n```{bash}\n# the active branch is indicated by an * beside the branch name\ngit branch\n\n# * master\n```\n\n\n2.  `git checkout -b` —— create and switch to a new branch\n\n\n```{bash}\n# create and switch to the new branch feature-A from the master branch\n# if this is done\n# then all modifications take effect to the feature-A branch, not the master branch\ngit checkout -b feature-A\n# the above command can also be achieved by combining the two\ngit branch feature-A  # create\ngit checkout feature-A  # switch to\n\n# 切换到一个新分支 'feature-A'\n\ngit branch\n\n# * feature-A\n#   master\n\n# add a new line to README.md like\n# # Git Guide\n\n#   - feature-A\n\ngit add README.md\ngit commit -m \"Add feature-A\"\n```\n\n\n3.  `git merge` —— merge branches\n\n\n```{bash}\n# switch to the master branch\ngit checkout master\n# merge feature-A to master\n# create a merge commit in all cases using --no-ff\ngit merge --no-ff feature-A\n```\n\n\n### Modify commits\n\n1.  `git reset --hard` —— back to a specific status\n\n\n```{bash}\n# purpose:\n# back to the status before creating the feature-A branch\n# then create a new branch named fix-B\n# you need to provide the hash value of some commit, to which you want to back\n# you can query it using \"git log\"\n# because we want to back to the status before creating the feature-A branch\n# we back to the commit \"Add index\", which is the last commit before creating the feature-A branch\ngit reset --hard e4fbb2140a7a25d8fa03a53bbf2129c5d8d56aaa\n\n# HEAD 现在位于 e4fbb21 Add index\n\ngit checkout -b fix-B\n\n# add a new line to README.md like\n# # Git Guide\n\n#   - fix-B\n\ngit add README.md\ngit commit -m \"Fix B\"\n\n# forward to the status after merging feature-A\n# because \"git log\" can only query the history up to the current status\n# we use \"git reflog\" to query the repository log to retrieve the hash value we want\ngit checkout master\ngit reset --hard c61dab8\n\n# 切换到分支 'master'\n# HEAD 现在位于 c61dab8 Merge branch 'feature-A'\n\n# merge fix-B to master\ngit merge --no-ff fix-B\n\n# 自动合并 README.md\n# 冲突（内容）：合并冲突于 README.md\n# 自动合并失败，修正冲突然后提交修正的结果。\n\n# this tells us that there is a conflict in README.md between feature-A and fix-B\n# now we need to open the README.md\n# then we will see the following\n\n# # Git Guide\n\n# <<<<<<< HEAD\n#   - feature-A\n# =======\n#   - fix-B\n# >>>>>>> fix-B\n\n# the content above ======= is the content in HEAD\n# below is the content in fix-B\n# now we modify it to what we want after merging manually\n\n# # Git Guide\n\n#   - feature-A\n#   - fix-B\n\n# now just add and commit it\ngit add README.md\ngit commit -m \"Fix conflict\"\n```\n\n\n2.  `git commit --amend` —— modify the last commit\n\n\n```{bash}\n# this will open a text editor\n# you can modify the last commit summary and then save and exit\ngit commit --amend\n```\n\n\n3.  `git rebase -i` —— change/merge history\n\n\n```{bash}\n# create and switch to the branch feature-C\ngit checkout -b feature-C\n\n# modify README.md like\n# which contains a small typo error\n# # Git Guide\n\n#   - feature-A\n#   - fix-B\n#   - faeture-C\n\n# -a option automatically stages modified and deleted files, not new files\ngit commit -am \"Add feature-C\"\n\n# now fix the typo error\n# # Git Guide\n\n#   - feature-A\n#   - fix-B\n#   - feature-C\n\ngit commit -am \"Fix typo\"\n\n# in fact, we almost don't expect such a commit to be recorded in our commit history at any time\n# so we hope to merge it into the last commit instead of creating a new commit for it\n# here we use \"git rebase -i\" to do this\n# HEAD~2 means that we pick the last two commits and open them in a text editor\ngit rebase -i HEAD~2\n\n# replace \"pick\" with \"fixup\" in the line of \"Fix typo\"\n\n# 成功变基并更新 refs/heads/feature-C。\n\n# now we can see that the commit \"Fix typo\" is not existed in our log\ngit log\n\ngit checkout master\ngit merge --no-ff feature-C\n```\n\n\n### Push to remote repository\n\n\n```{bash}\n# git@github.com:<account name>/<repository name>.git\n# add a remote repository for our local repository\n# Git will set \"origin\" as the name of the remote repository\ngit remote add origin git@github.com:yr-neurospace/git-tutorial.git\n\n# push the content of the current branch to the master branch of the remote repository origin\n# when using -u option, it will set the master branch of the remote repository origin as the upstream of the local branch used now\n# this will let the local branch used now automatically pull content from the master branch of the remote repository origin when using \"git pull\" command without adding extra options\ngit push -u origin master\n```\n\n\n### Pull from remote repository\n\n1.  `git clone` —— pull a remote repository\n\n\n```{bash}\n# by default, we are in the master branch\n# at the same time, Git will set origin as the identifier of the remote repository\n# in other words, the local master branch and the remote master branch are identical\ngit clone git@github.com:yr-neurospace/git-tutorial.git\n\n# show branch info for both local and remote repositories\ngit branch -a\n\n# create the feature-D branch in local\n# the content of which is from the feature-D branch of the remore origin repository\ngit checkout -b feature-D origin/feature-D\n\n# pull the latest feature-D branch to local from the remote repository origin\ngit pull origin feature-D\n```\n\n\n## Some GitHub functions\n\n### Issue\n\nThe system managing Issue is called Bug Tracking System (BTS).\n\nIn GitHub, you can use Issue to\n\n-   report BUG\n\n-   communicate among developers\n\n-   make to-do list\n\nIn Issue, you can use the GitHub Flavored Markdown (GFM) syntax to organize your content. This will make your content clearer. Especially, you can use the Tasklist syntax to make a to-do list:\n\n\n```{GFM}\n# To do\n\n- [] add an attractive logo\n- [x] finish deployment\n- [] add sampling tool\n```\n\n\nTask marked by `[x]` is done.\n\nIn addition, as we all have seen that every Issue has been assigned an unique number, say \"#24\". We can associate a commit to one or more commits by adding those Issue's numbers to our commit log, e.g. `Add feature #24`.\n\nWe can also use this way to close an Issue by describing a commit in one of the following formats:\n\n\n```{GFM}\nfix #24\nfixes #24\nfixed #24\n\nclose $24\ncloses #24\nclosed #24\n\nresolve #24\nresolves #24\nresolved #24\n```\n\n\nWe may also convert an Issue to a Pull Request, because the numbers of Issue and Pull Request are interoperable.\n\n## Send Pull Request\n\n1.  Fork the repository you want to develop in GitHub.\n2.  Clone the forked repository to our local development environment using `git clone` command.\n3.  Create a feature branch from the target branch.\n\nGenerally, we first create a feature branch and then develop new functions or fix some bugs in this feature branch.\n\n4.  Developing in the feature branch.\n5.  `add` and then `commit` our modifications.\n6.  Create the remote feature branch and then push the content of the local feature branch to it.\n\ne.g., `git push origin work` will create a remote feature branch called `work` and then push the local content to it.\n\n7.  Send Pull Request in GitHub (don't forget to switch to the feature branch).\n\nIn addition, to keep up-to-date with the original repository, not the forked repository under our account, we can set the original repository as our \"upstream\" repository with the command `git remote add upstream <the original repository>`.\n\nOnce set, we can fetch the latest source code from the original repository, and then merge it with the corresponding branch in our local repository, so we can perform development based the latest version.\n\n\n```{bash}\ngit fetch upstream\ngit merge upstream/master\n```\n\n\n## Accept Pull Request\n\n1.  Clone the remote repository accepting pull request to local.\n2.  Set the remote repository sending pull request as the remote repository of our cloned local repository with specific name e.g. \"PRRepo\", and then fetch it to local.\n3.  Now we have both the repository accepting pull request and the repository sending pull request. Next, we create a feature branch used to test merging from the repository accepting pull request. And then merge the pull request in the merging test branch. Once check passed, we can delete the merging test branch by using `git branch -D <merging test branch name>`.\n4.  Formally merge the pull request by one of the two methods:\n    -   Click `Merge pull request` in GitHub.\n\n    -   Merge pull request in the local and then push it to the remote.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}