{
  "hash": "210924ba4144e15a92956463bdbe8626",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Agilent mRNA expression microarray analysis using limma\"\nauthor: \"Rui Yang\"\ndate: \"2024-09-30\"\ndate-modified: last-modified\ncategories: [agilent, mrna, microarray, limma]\nformat:\n  html:\n    toc: true\n    toc-depth: 6\n    toc-location: left\n    fig-align: center\n    number-depth: 6\n    number-sections: true\n    fig-cap-location: bottom\n    fig-format: png\n    lightbox: true\n    tbl-cap-location: top\n    page-layout: full\n\nexecute:\n  warning: false\n  eval: false\n---\n\n\n\n## Download ferret (Mustela putorius furo, 9669) reference files\n\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nwget -c https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/011/764/305/GCF_011764305.1_ASM1176430v1.1/GCF_011764305.1_ASM1176430v1.1_genomic.fna.gz\nwget -c https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/011/764/305/GCF_011764305.1_ASM1176430v1.1/GCF_011764305.1_ASM1176430v1.1_genomic.gff.gz\nwget -c https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/011/764/305/GCF_011764305.1_ASM1176430v1.1/GCF_011764305.1_ASM1176430v1.1_genomic.gtf.gz\n```\n:::\n\n\n\n## Extract transcript sequences\n\n\n\n::: {.cell}\n\n```{.sh .cell-code}\n# -w: write a fasta file with spliced exons for each transcript\ngffread -w GCF_011764305.1_ASM1176430v1.1_genomic.transcripts.fna -g GCF_011764305.1_ASM1176430v1.1_genomic.fna GCF_011764305.1_ASM1176430v1.1_genomic.gff\n```\n:::\n\n\n\n## Build blast database\n\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nmakeblastdb -in GCF_011764305.1_ASM1176430v1.1_genomic.transcripts.fna -parse_seqids -taxid 9669 -blastdb_version 5 -title \"GCF_011764305.1_ASM1176430v1.1 Ferret (Mustela putorius furo) spliced transcripts\" -dbtype nucl\n```\n:::\n\n\n\n## Prepare mRNA microarray data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(GEOquery)\nlibrary(limma)\nlibrary(tidyverse)\nlibrary(vroom)\n\ngse_accession <- \"GSE60687\"\nout_dir <- \"./data/microarray\"\n\ngse <- getGEO(gse_accession, GSEMatrix = T, getGPL = T)\nsample_df <- gse[[paste0(gse_accession, \"_series_matrix.txt.gz\")]]@phenoData@data %>%\n    mutate(\n        sample_id = paste0(\n            str_extract_all(description, \"A(17|19)\", simplify = T), \".\",\n            str_extract_all(description, \"[A-Z]{2,}\", simplify = T), \".\",\n            str_extract_all(description, \"^\\\\d\", simplify = T),\n            str_extract_all(description, \"_2\", simplify = T)\n        ),\n        sample_file = file.path(out_dir, paste0(sample_id, \".txt.gz\")),\n        wget_cmd = paste0(\"wget -c -O \", sample_file, \" \", supplementary_file)\n    ) %>%\n    arrange(sample_id)\n\nsapply(sample_df$wget_cmd, function(x) {\n    system(x)\n})\n\nvroom_write(sample_df, file = file.path(out_dir, \"samples.tsv\"))\n\ngpl <- getGEO(gse[[paste0(gse_accession, \"_series_matrix.txt.gz\")]]@annotation)\ngpl_fna <- filter(gpl@dataTable@table, SPOT_ID != \"CONTROL\") %>%\n    mutate(fna = paste0(\">\", ID, \":\", COL, \":\", ROW, \":\", NAME, \":\", CONTROL_TYPE, \":\", ACCESSION_STRING, \":\", CHROMOSOMAL_LOCATION, \"\\n\", SEQUENCE)) %>%\n    pull(fna) %>%\n    unique()\n\nvroom_write(gpl@dataTable@table, file = file.path(out_dir, \"gpl.tsv\"))\nvroom_write_lines(gpl_fna, file = file.path(out_dir, \"gpl.fna\"))\n```\n:::\n\n\n\n## Run `blastn`\n\n\n\n::: {.cell}\n\n```{.sh .cell-code}\n# GPL probe sequences against transcripts\nblastn -task megablast -db ../genome/blastdb/GCF_011764305.1_ASM1176430v1.1_genomic.transcripts.fna -query gpl.fna -outfmt \"6 qseqid sseqid evalue bitscore pident qcovs stitle\" -dust no -max_target_seqs 1 -num_threads 16 -out gpl.blastn.txt\n```\n:::\n\n\n\n## Attach gene symbols to GPL probes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rtracklayer)\nlibrary(vroom)\nlibrary(tidyverse)\n\ngff_file <- \"./data/genome/GCF_011764305.1_ASM1176430v1.1_genomic.gff\"\ngpl_blastn_file <- \"./data/microarray/gpl.blastn.txt\"\nout_dir <- \"./data/microarray\"\n\ngff <- as.data.frame(import(gff_file, version = \"3\")) %>%\n    select(all_of(c(\n        \"seqnames\", \"start\", \"end\", \"width\", \"strand\",\n        \"source\", \"type\", \"ID\", \"Dbxref\", \"Name\", \"gbkey\",\n        \"gene\", \"gene_biotype\", \"Parent\", \"transcript_id\"\n    ))) %>%\n    distinct()\n\ngpl_blastn <- vroom(gpl_blastn_file, col_names = c(\"qseqid\", \"sseqid\", \"evalue\", \"bitscore\", \"pident\", \"qcovs\", \"stitle\")) %>%\n    distinct() %>%\n    group_by(qseqid) %>%\n    slice_min(evalue) %>%\n    slice_max(bitscore) %>%\n    slice_max(pident) %>%\n    slice_max(qcovs) %>%\n    ungroup()\n\ntable(duplicated(gpl_blastn$qseqid))\n\ndf <- left_join(gpl_blastn, gff, by = c(\"sseqid\" = \"ID\"))\ndf <- left_join(df, filter(gff, type == \"gene\") %>%\n    select(all_of(c(\"seqnames\", \"gene\", \"gene_biotype\"))) %>%\n    distinct(),\nby = join_by(seqnames, gene),\nsuffix = c(\".GPL_blastn\", \".Parent_gene\")\n)\n\nDbxref_ls <- lapply(df$Dbxref, function(x) {\n    if (length(x) > 0) {\n        y <- strsplit(x, split = \":\", fixed = T) %>%\n            do.call(rbind, .)\n        setNames(y[, 2], y[, 1]) %>%\n            as.list() %>%\n            as.data.frame()\n    } else {\n        data.frame()\n    }\n})\nDbxref_names <- lapply(Dbxref_ls, names) %>%\n    unlist() %>%\n    unique()\nDbxref_df <- lapply(Dbxref_ls, function(x) {\n    if (nrow(x) == 0) {\n        setNames(\n            rep(NA, length(Dbxref_names)),\n            Dbxref_names\n        ) %>%\n            as.list() %>%\n            as.data.frame()\n    } else {\n        x\n    }\n}) %>% do.call(bind_rows, .)\n\nnames(Dbxref_df) <- paste0(\"Dbxref_\", names(Dbxref_df))\n\ndf <- bind_cols(df, Dbxref_df)\n\nvroom_write(df, file = file.path(out_dir, \"gpl.with_gene_symbols.tsv\"), delim = \"\\t\")\n```\n:::\n\n\n\n## Differential analysis using limma\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(limma)\nlibrary(vroom)\nlibrary(tidyverse)\n\nsample_file <- \"./data/microarray/samples.tsv\"\ngpl_file <- \"./data/microarray/gpl.with_gene_symbols.tsv\"\nout_dir <- \"./data/degs\"\n\ndir.create(out_dir)\n\ngpl <- vroom(gpl_file, delim = \"\\t\")\ngpl$ProbeName <- sapply(gpl$qseqid, function(x) {\n    strsplit(x, \":\")[[1]][4]\n})\ngpl <- gpl %>%\n    select(all_of(c(\n        \"ProbeName\", \"Dbxref_GeneID\", \"gene\",\n        \"gene_biotype.GPL_blastn\", \"gene_biotype.Parent_gene\"\n    ))) %>%\n    mutate(GeneBioType = if_else(is.na(gene_biotype.Parent_gene),\n        gene_biotype.GPL_blastn,\n        gene_biotype.Parent_gene\n    )) %>%\n    select(all_of(c(\"ProbeName\", \"Dbxref_GeneID\", \"gene\", \"GeneBioType\"))) %>%\n    distinct()\nnames(gpl) <- c(\"ProbeName\", \"EntrezID\", \"Symbol\", \"GeneBioType\")\n\ntable(duplicated(gpl$ProbeName))\n\nsample_df <- vroom(sample_file)\n\n# read in data\n# here, we are reading in single-channel Agilent (foreground: median signal; background: median signal) intensity data\n# so source = \"agilent\" and green.only = T\n# here, we read in the extra column gIsWellAboveBG, which records whether the intensity of each spot is considered above the background level for that array\nx <- read.maimages(\n    gsub(\n        \"~/mywd/agilent_mrna_expression_microarray_analysis_using_limma\",\n        \".\",\n        gsub(\"\\\\.gz$\", \"\", sample_df$sample_file)\n    ),\n    source = \"agilent\", green.only = T,\n    other.columns = \"gIsWellAboveBG\"\n)\nx_copy <- x\n\n# gene annotation\nx$genes <- left_join(x$genes, gpl, by = \"ProbeName\")\nall(x$genes$ProbeName == x_copy$genes$ProbeName)\n\n# background correction and normalization\n# at this step, we need control probes to be existed in the dataset\ny <- backgroundCorrect(x, method = \"normexp\")\ny <- normalizeBetweenArrays(y, method = \"quantile\")\n\n# gene filtering\n# filter out control probes\nControl <- y$genes$ControlType == 1L\n# filter out probes without Symbol\nNoSymbol <- is.na(y$genes$Symbol)\n# keep probes that express in at least 3 arrays (because there are at least 3 replicates in each array)\nIsExpr <- rowSums(y$other$gIsWellAboveBG > 0) >= 3\n\nyfilt <- y[!Control & !NoSymbol & IsExpr, ]\n\ngenes_colnames <- c(\"EntrezID\", \"Symbol\")\nE_colnames <- colnames(yfilt$E)\nexprMat <- bind_cols(\n    yfilt$genes[, genes_colnames],\n    as.data.frame(yfilt$E)\n)\nexprMat_dedup <- exprMat %>%\n    arrange(Symbol) %>%\n    group_by(EntrezID, Symbol) %>%\n    reframe(across(everything(), mean))\nyfilt$genes <- exprMat_dedup[, genes_colnames]\nyfilt$E <- as.matrix(exprMat_dedup[, E_colnames])\n\n# differential expression\ntreatments <- gsub(\"\\\\.[_0-9]+$\", \"\", sample_df$sample_id)\nlevels <- unique(treatments)\ntreatments <- factor(treatments, levels = levels)\ndesign <- model.matrix(~ 0 + treatments)\ncolnames(design) <- levels\n\nfit <- lmFit(yfilt, design = design)\ncontrast_pairs <- expand.grid(x = levels, y = levels) %>%\n    mutate(\n        flag = if_else(x != y, T, F),\n        pair = paste0(x, \"-\", y)\n    ) %>%\n    filter(flag) %>%\n    pull(pair) %>%\n    unique()\ncontrast_matrix <- makeContrasts(contrasts = contrast_pairs, levels = design)\nfit2 <- contrasts.fit(fit, contrast_matrix)\nfit2 <- eBayes(fit2, trend = T, robust = T)\n\nfor (pair in contrast_pairs) {\n    res <- topTable(fit2, coef = pair, number = Inf, adjust.method = \"BH\", p.value = 1)\n    vroom_write(res, file = file.path(out_dir, paste0(pair, \".tsv\")), delim = \"\\t\")\n}\n```\n:::\n\n\n\n## Filter DEGs and plot volcanos\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vroom)\nlibrary(tidyverse)\nlibrary(YRUtils)\n\nset_fonts()\n\ndegs_dir <- \"./data/degs\"\nout_dir <- \"./data/clean_degs/padj0.05_logfc1\"\nsig_colors <- c(\"#FF4757\", \"#546DE5\", \"#D2DAE2\")\npadj_th <- 0.05\nlogfc_th <- 1\n\ndir.create(out_dir, recursive = T)\n\ndegs_files <- list.files(degs_dir, pattern = \"\\\\.tsv$\", full.names = T, recursive = F)\nfor (degs_file in degs_files) {\n    pair <- strsplit(gsub(\"\\\\.[a-zA-Z0-9]+$\", \"\", basename(degs_file)),\n        split = \"-\", fixed = T\n    )[[1]]\n\n    degs_df <- vroom(degs_file, delim = \"\\t\", col_names = T)\n    clean_degs_df <- degs_df %>%\n        group_by(Symbol) %>%\n        slice_min(adj.P.Val, n = 1) %>%\n        slice_max(abs(logFC), n = 1) %>%\n        slice_sample(n = 1) %>%\n        ungroup() %>%\n        mutate(\n            diff_flag = if_else(adj.P.Val < padj_th,\n                if_else(logFC > logfc_th,\n                    paste0(pair[1], \" Up\"),\n                    if_else(logFC < -logfc_th,\n                        paste0(pair[2], \" Up\"),\n                        \"NO\"\n                    )\n                ),\n                \"NO\"\n            ),\n            diff_flag = factor(diff_flag, levels = c(\n                paste0(pair[1], \" Up\"),\n                paste0(pair[2], \" Up\"),\n                \"NO\"\n            ))\n        )\n\n    vroom_write(clean_degs_df, file = file.path(out_dir, basename(degs_file)))\n\n    if (any(duplicated(clean_degs_df$Symbol))) {\n        stop(\"Duplicated items still existed after filtering for \", degs_file)\n    }\n\n    diff_counts <- count(clean_degs_df, diff_flag) %>%\n        mutate(show_text = paste0(diff_flag, \": \", n))\n    plot_title <- paste0(\n        paste0(pair, collapse = \"_vs_\"), \"\\n\",\n        paste0(diff_counts$show_text, collapse = \"    \")\n    )\n\n    p <- ggplot(clean_degs_df) +\n        geom_point(aes(logFC, -log10(adj.P.Val), color = diff_flag),\n            alpha = 0.5, size = 2\n        ) +\n        geom_vline(\n            xintercept = c(-logfc_th, logfc_th),\n            linewidth = 1, col = \"grey25\", linetype = \"dashed\"\n        ) +\n        geom_hline(\n            yintercept = -log10(padj_th),\n            linewidth = 1, col = \"grey25\", linetype = \"dashed\"\n        ) +\n        scale_color_manual(values = setNames(sig_colors, levels(clean_degs_df$diff_flag))) +\n        labs(\n            title = plot_title,\n            x = \"log2 Fold Change\", y = \"-log10(p.adjust)\",\n            color = paste0(\"p.adjust < \", padj_th, \"\\n|log2(FC)| > \", logfc_th)\n        ) +\n        theme_classic() +\n        theme(\n            plot.title = element_text(hjust = 0.5),\n            axis.title.x = element_text(size = 26),\n            axis.title.y = element_text(size = 26),\n            axis.text.x = element_text(size = 24),\n            axis.text.y = element_text(size = 24),\n            legend.text = element_text(size = 24),\n            legend.title = element_text(size = 26),\n            text = element_text(family = \"Arial\")\n        )\n\n    ppreview(p, file = file.path(\n        out_dir,\n        gsub(\"\\\\.[a-zA-Z0-9]+$\", \".pdf\", basename(degs_file))\n    ))\n}\n```\n:::\n\n\n\n## GO analysis\n\n### Prepare ferret gene IDs\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vroom)\nlibrary(tidyverse)\n\ngpl_file <- \"./data/microarray/gpl.with_gene_symbols.tsv\"\nout_dir <- \"./data/go\"\n\ndir.create(out_dir)\n\ngpl <- vroom(gpl_file, delim = \"\\t\")\ngpl$ProbeName <- sapply(gpl$qseqid, function(x) {\n    strsplit(x, \":\")[[1]][4]\n})\ngpl <- gpl %>%\n    select(all_of(c(\n        \"ProbeName\", \"Dbxref_GeneID\", \"gene\",\n        \"gene_biotype.GPL_blastn\", \"gene_biotype.Parent_gene\"\n    ))) %>%\n    mutate(GeneBioType = if_else(is.na(gene_biotype.Parent_gene),\n        gene_biotype.GPL_blastn,\n        gene_biotype.Parent_gene\n    )) %>%\n    select(all_of(c(\"ProbeName\", \"Dbxref_GeneID\", \"gene\", \"GeneBioType\"))) %>%\n    distinct()\nnames(gpl) <- c(\"ProbeName\", \"EntrezID\", \"Symbol\", \"GeneBioType\")\n\nvroom_write_lines(as.character(sort(unique(gpl$EntrezID))),\n    file = file.path(out_dir, \"ferret_entrezids.txt\")\n)\n```\n:::\n\n\n\n### Prepare orthologous gene set between mm10 and ferret\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vroom)\nlibrary(tidyverse)\nlibrary(magrittr)\n\nferret_mm_orthologs_file <- \"./data/go/ferret_mm10.orthologs.tsv\"\nferret_dataset_file <- \"./data/go/ferret_ncbi_dataset.tsv\"\n\nferret_dataset_df <- vroom(ferret_dataset_file) %>%\n    select(all_of(c(\"NCBI GeneID\", \"Symbol\", \"Gene Type\", \"Gene Group Identifier\"))) %>%\n    set_colnames(c(\"ferret_EntrezID\", \"ferret_Symbol\", \"ferret_GeneType\", \"Ortholog_Group_Identifier\")) %>%\n    na.omit() %>%\n    mutate_all(as.character) %>%\n    distinct()\nferret_mm_orthologs_df <- vroom(ferret_mm_orthologs_file) %>%\n    select(all_of(c(\"NCBI GeneID\", \"Symbol\", \"Gene Group Identifier\"))) %>%\n    set_colnames(c(\"mm10_EntrezID\", \"mm10_Symbol\", \"Ortholog_Group_Identifier\")) %>%\n    na.omit() %>%\n    mutate_all(as.character) %>%\n    distinct()\ndf <- inner_join(ferret_dataset_df, ferret_mm_orthologs_df, by = \"Ortholog_Group_Identifier\")\nvroom_write(df, file = file.path(dirname(ferret_mm_orthologs_file), \"ferret_mm10.orthologs.clean.tsv\"))\n```\n:::\n\n\n\n### Attach orthologous mm10 gene IDs to DEGs of ferret\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vroom)\nlibrary(tidyverse)\n\nferret_mm_orthologs_file <- \"./data/go/ferret_mm10.orthologs.clean.tsv\"\ndegs_files <- c(\n    \"./data/clean_degs/padj0.05_logfc1/A17.VZ-A19.VZ.tsv\",\n    \"./data/clean_degs/padj0.05_logfc1/A17.ISVZ-A19.ISVZ.tsv\",\n    \"./data/clean_degs/padj0.05_logfc1/A17.OSVZ-A19.OSVZ.tsv\"\n)\n\nferret_mm_orthologs_df <- vroom(ferret_mm_orthologs_file) %>%\n    mutate_all(as.character)\nfor (degs_file in degs_files) {\n    vroom(degs_file) %>%\n        select(all_of(c(\n            \"EntrezID\", \"Symbol\",\n            \"logFC\", \"P.Value\", \"adj.P.Val\", \"diff_flag\"\n        ))) %>%\n        mutate(EntrezID = as.character(EntrezID)) %>%\n        inner_join(ferret_mm_orthologs_df, by = c(\"EntrezID\" = \"ferret_EntrezID\")) %>%\n        arrange(desc(logFC)) %>%\n        distinct() %>%\n        filter(ferret_GeneType == \"PROTEIN_CODING\") %>%\n        vroom_write(file = gsub(\"tsv$\", \"with_mm10_IDs.tsv\", degs_file))\n}\n```\n:::\n\n\n\n## Check the differential expression concordance between samples of mink and samples of ferret\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vroom)\nlibrary(tidyverse)\n\nmink_degs_file <- \"H:/ubuntu_ssd_backup/projects/mink/proj/rna/degs/res/only_degs/mm10/P2_Gyr_vs_P2_Sul.txt\"\ndegs_files <- c(\n    \"./data/clean_degs/padj0.05_logfc1/A17.VZ-A19.VZ.with_mm10_IDs.tsv\",\n    \"./data/clean_degs/padj0.05_logfc1/A17.ISVZ-A19.ISVZ.with_mm10_IDs.tsv\",\n    \"./data/clean_degs/padj0.05_logfc1/A17.OSVZ-A19.OSVZ.with_mm10_IDs.tsv\"\n)\n\nmink_degs <- vroom(mink_degs_file) %>%\n    select(all_of(c(\"final_gene_name\", \"diff_flag\"))) %>%\n    distinct()\ndegs_df <- tibble()\nfor (degs_file in degs_files) {\n    tmp_df <- vroom(degs_file) %>%\n        select(all_of(c(\"mm10_Symbol\", \"logFC\"))) %>%\n        mutate(tissue = gsub(\n            \"A17\\\\.[A-Z]+-A19\\\\.|\\\\.with_mm10_IDs\\\\.tsv$\",\n            \"\", basename(degs_file)\n        )) %>%\n        distinct()\n    degs_df <- bind_rows(degs_df, tmp_df)\n}\ndf <- inner_join(mink_degs, degs_df, by = c(\"final_gene_name\" = \"mm10_Symbol\")) %>%\n    mutate(\n        tissue = factor(tissue, levels = c(\"VZ\", \"ISVZ\", \"OSVZ\")),\n        logFC_sign = if_else(logFC >= 0, \"+\", \"-\")\n    )\n\nggplot(df) +\n    geom_jitter(aes(tissue, logFC, color = diff_flag))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}